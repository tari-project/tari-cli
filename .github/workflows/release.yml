name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x86_64
            archive: tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x86_64
            archive: zip
          - target: aarch64-apple-darwin
            os: macos-14
            name: macos-aarch64
            archive: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install libdbus-1-dev pkg-config

      - name: Install dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: brew install pkg-config openssl

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          vcpkg install openssl:x64-windows-static
          echo "VCPKG_ROOT=C:\vcpkg" >> $GITHUB_ENV
          echo "OPENSSL_DIR=C:\vcpkg\packages\openssl_x64-windows-static" >> $GITHUB_ENV

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive (Unix)
        if: matrix.archive == 'tar.gz'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/tari dist/
          cd dist
          tar -czf ../tari-${{ matrix.name }}.tar.gz tari

      - name: Create archive (Windows)
        if: matrix.archive == 'zip'
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/tari.exe dist/
          cd dist
          7z a ../tari-${{ matrix.name }}.zip tari.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tari-${{ matrix.name }}
          path: tari-${{ matrix.name }}.${{ matrix.archive }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        run: gh release create ${{ github.ref_name }} artifacts/*/tari-* --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
